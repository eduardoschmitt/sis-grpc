// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v6.31.1
// source: video_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type handleBidiStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "video";

export interface VideoRequest {
  chunkData: Buffer;
}

export interface VideoResponse {
  chunkData: Buffer;
}

function createBaseVideoRequest(): VideoRequest {
  return { chunkData: Buffer.alloc(0) };
}

export const VideoRequest: MessageFns<VideoRequest> = {
  encode(message: VideoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkData.length !== 0) {
      writer.uint32(10).bytes(message.chunkData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunkData = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoRequest {
    return { chunkData: isSet(object.chunkData) ? Buffer.from(bytesFromBase64(object.chunkData)) : Buffer.alloc(0) };
  },

  toJSON(message: VideoRequest): unknown {
    const obj: any = {};
    if (message.chunkData.length !== 0) {
      obj.chunkData = base64FromBytes(message.chunkData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoRequest>, I>>(base?: I): VideoRequest {
    return VideoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoRequest>, I>>(object: I): VideoRequest {
    const message = createBaseVideoRequest();
    message.chunkData = object.chunkData ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseVideoResponse(): VideoResponse {
  return { chunkData: Buffer.alloc(0) };
}

export const VideoResponse: MessageFns<VideoResponse> = {
  encode(message: VideoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chunkData.length !== 0) {
      writer.uint32(10).bytes(message.chunkData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chunkData = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoResponse {
    return { chunkData: isSet(object.chunkData) ? Buffer.from(bytesFromBase64(object.chunkData)) : Buffer.alloc(0) };
  },

  toJSON(message: VideoResponse): unknown {
    const obj: any = {};
    if (message.chunkData.length !== 0) {
      obj.chunkData = base64FromBytes(message.chunkData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VideoResponse>, I>>(base?: I): VideoResponse {
    return VideoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VideoResponse>, I>>(object: I): VideoResponse {
    const message = createBaseVideoResponse();
    message.chunkData = object.chunkData ?? Buffer.alloc(0);
    return message;
  },
};

export type VideoServiceService = typeof VideoServiceService;
export const VideoServiceService = {
  processVideo: {
    path: "/video.VideoService/ProcessVideo",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: VideoRequest): Buffer => Buffer.from(VideoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): VideoRequest => VideoRequest.decode(value),
    responseSerialize: (value: VideoResponse): Buffer => Buffer.from(VideoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): VideoResponse => VideoResponse.decode(value),
  },
} as const;

export interface VideoServiceServer extends UntypedServiceImplementation {
  processVideo: handleBidiStreamingCall<VideoRequest, VideoResponse>;
}

export interface VideoServiceClient extends Client {
  processVideo(): ClientDuplexStream<VideoRequest, VideoResponse>;
  processVideo(options: Partial<CallOptions>): ClientDuplexStream<VideoRequest, VideoResponse>;
  processVideo(metadata: Metadata, options?: Partial<CallOptions>): ClientDuplexStream<VideoRequest, VideoResponse>;
}

export const VideoServiceClient = makeGenericClientConstructor(
  VideoServiceService,
  "video.VideoService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): VideoServiceClient;
  service: typeof VideoServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
